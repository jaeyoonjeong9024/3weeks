import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder

# -----------------------------
# 1) 데이터 준비
# -----------------------------
df = pd.read_excel("/content/drive/MyDrive/Raisin_Dataset.xlsx")

# -----------------------------
# 2) 결측치 제거
# -----------------------------
df = df.dropna()

# -----------------------------
# 3) Label Encoding
# -----------------------------
label_encoders = {}
for column in df.columns:
    if df[column].dtype == 'object':
        label_encoders[column] = LabelEncoder()
        df[column] = label_encoders[column].fit_transform(df[column])

# -----------------------------
# 4) 입력과 출력 분리
# -----------------------------
X = df.drop(columns=['Class'])
y = df['Class']

# -----------------------------
# 5) 훈련과 테스트 데이터 분리
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

# -----------------------------
# 6) 모델 구성 및 학습
# -----------------------------
knn = KNeighborsClassifier(n_neighbors=5)
dt = DecisionTreeClassifier(random_state=42)
rf = RandomForestClassifier(n_estimators=200, random_state=42)
lr = LogisticRegression(max_iter=500)

knn.fit(X_train, y_train)
dt.fit(X_train, y_train)
rf.fit(X_train, y_train)
lr.fit(X_train, y_train)

# -----------------------------
# 7) 예측 및 평가
# -----------------------------
knn_y_pred = knn.predict(X_test)
dt_y_pred = dt.predict(X_test)
rf_y_pred = rf.predict(X_test)
lr_y_pred = lr.predict(X_test)

knn_acc = accuracy_score(y_test, knn_y_pred)
dt_acc = accuracy_score(y_test, dt_y_pred)
rf_acc = accuracy_score(y_test, rf_y_pred)
lr_acc = accuracy_score(y_test, lr_y_pred)

print("=== KNN Test Accuracy ===")
print(f"KNN : {knn_acc:.4f}")
print("혼동 행렬 (Confusion Matrix):")
print(confusion_matrix(y_test, knn_y_pred))

print("\n=== DT Test Accuracy ===")
print(f"Decision Tree : {dt_acc:.4f}")
print("혼동 행렬 (Confusion Matrix):")
print(confusion_matrix(y_test, dt_y_pred))

print("\n=== RF Test Accuracy ===")
print(f"Random Forest : {rf_acc:.4f}")
print("혼동 행렬 (Confusion Matrix):")
print(confusion_matrix(y_test, rf_y_pred))

print("\n=== LR Test Accuracy ===")
print(f"Logistic Reg. : {lr_acc:.4f}")
print("혼동 행렬 (Confusion Matrix):")
print(confusion_matrix(y_test, lr_y_pred))
